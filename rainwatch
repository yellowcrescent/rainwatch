#!/usr/bin/env python
# coding=utf-8
###############################################################################
#
# rainwatch
# Rainwatch: Deluge RPC client and download manager
#
# @author   J. Hipps <jacob@ycnrg.org>
# @repo     https://bitbucket.org/yellowcrescent/rainwatch
#
# Copyright (c) 2016 J. Hipps / Neo-Retro Group
#
# https://ycnrg.org/
#
# @deps     rwatch
#
###############################################################################

import sys
import os
import re
import json
import signal
import optparse
import operator
import time
import requests
from datetime import datetime
from setproctitle import setproctitle

from rwatch.logthis import C,LL,logthis,ER,failwith,loglevel,print_r,exceptionHandler,openlog,closelog
from rwatch import rcfile,deluge,ruleparser,jabber,daemon,tclient
from rwatch.util import *
from rwatch.ssh2 import rainshell

class xsetup:
    """Contains version information and globals"""
    ## Version info
    version = "0.11.10"
    vdate   = "26 Apr 2016"

    gitinfo = {}
    config = None
    lconfig = None
    defaults = {
                    'run': {
                        'torid': None,
                        'quiet': False,
                        'list': False,
                        'json': False,
                        'full': False,
                        'srv': False,
                        'fdebug': False
                    },
                    'core': {
                        'loglevel': LL.INFO,
                        'logfile': "rainwatch.log",
                        'rules': "rainwatch.rules",
                        'tclient': "deluge"
                    },
                    'xfer': {
                        'hostname': None,
                        'user': None,
                        'port': 22,
                        'basepath': '',
                        'keyfile': None
                    },
                    'notify': {
                        'hostname': None,
                        'user': None,
                        'icon': ""
                    },
                    'srv': {
                        'pidfile': "rainwatch.pid",
                        'url': "http://localhost:4464",
                        'iface': "0.0.0.0",
                        'port': 4464,
                        'nofork': False,
                        'debug': False,
                        'shared_key': ''
                    },
                    'redis': {
                        'host': "localhost",
                        'port': 6379,
                        'db': 11,
                        'prefix': "rainwatch"
                    },
                    'xmpp': {
                        'user': None,
                        'pass': None,
                        'server': None,
                        'sendto': None
                    },
                    'deluge': {
                        'user': "",
                        'pass': "",
                        'hostname': "localhost",
                        'port': 58846
                    },
                    'rtorrent': {
                        'uri': "http://localhost:5000"
                    },
                    'web': {
                        'bw_graph': None
                    }
               }

def show_banner():
    """
    Display banner
    """
    print ""
    print C.CYN, "*** ", C.WHT, "rainwatch", C.OFF
    print C.CYN, "*** ", C.CYN, "Version", xsetup.version, "(" + xsetup.vdate + ")", C.OFF
    print C.CYN, "*** ", C.GRN, "Copyright (c) 2016 J. Hipps / Neo-Retro Group", C.OFF
    print C.CYN, "*** ", C.GRN, "J. Hipps <jacob@ycnrg.org>", C.OFF
    print C.CYN, "*** ", C.YEL, "https://ycnrg.org/", C.OFF
    print ""

def parse_cli():
    """
    Parse command-line options
    """
    global oparser
    oparser = optparse.OptionParser(usage="%prog [options] <[-i] TORRENT_ID>",version=xsetup.version+" ("+xsetup.vdate+")")

    # General options
    oparser.add_option('-v', '--verbose', action="count", dest="run.verbose", help="Increase logging verbosity (-v Verbose, -vv Debug, -vvv Debug2)")
    oparser.add_option('-L','--loglevel', action="store", dest="core.loglevel", default=False,metavar="NUM", help="Logging output verbosity (4=error,5=warning,6=info,7=verbose,8=debug,9=debug2)")
    oparser.add_option('-q', action="store_true", dest="run.quiet", default=False, help="Quiet - suppress log messages (use as first option)")
    oparser.add_option('-i', action="store", dest="run.torid", default=False,metavar="TORID", help="Torrent ID")

    oparser.add_option('-d','--srv', action="store_true", dest="run.srv", default=False, help="Daemon mode")
    oparser.add_option('-l','--list', action="store_true", dest="run.list", default=False, help="List torrents")
    oparser.add_option('-f','--full', action="store_true", dest="run.full", default=False, help="Full output in torrent list")
    oparser.add_option('-j','--json', action="store_true", dest="run.json", default=False, help="Output data as JSON")

    oparser.add_option('--fdebug', action="store_true", dest="run.fdebug", default=False, help="Daemon: Flask debug mode")
    oparser.add_option('--nofork', action="store_true", dest="srv.nofork", default=False, help="Daemon: Do not fork into background")

    options, args = oparser.parse_args(sys.argv[1:])
    vout = vars(options)

    if len(args) >= 1:
        vout['run.torid'] = args[0]

    if vout['run.verbose']:
        vout['run.verbose'] += 6
        vout['core.loglevel'] = vout['run.verbose']
    if vout['run.verbose'] or vout['core.loglevel']:
        loglevel(int(vout['core.loglevel']))
    if vout['run.quiet']:
        vout['core.loglevel'] = LL.ERROR
        loglevel(vout['core.loglevel'])

    return vout


def mode_list():
    global dlx

    # if torrent ID is specified, use it to filter
    if xsetup.config.run['torid']:
        fltr = { 'id': xsetup.config.run['torid'] }
    else:
        fltr = {}

    # get list of torrents
    if xsetup.config.run['full']:
        torlist = dlx.getTorrentList(filter=fltr,full=True)
    else:
        torlist = dlx.getTorrentList(filter=fltr)

    if xsetup.config.run['json']:
        print json.dumps(torlist,indent=4,separators=(',', ': '))
    else:
        for ti,tv in torlist.iteritems():
            print "%s: %s (%0.01f) [%s]" % (ti,tv['name'],tv['progress'],tv['tracker_host'])

def mode_chook(tid):
    global dlx,jbx

    # get torrent data
    logthis(">> Processing 'complete' exec hook for",suffix=tid,loglevel=LL.INFO)
    tordata = dlx.getTorrent(tid)

    # find matching rules
    rname,rset = ruleparser.match(tordata)
    if rname:
        logthis("++ Matched ruleset:\n",suffix=print_r(rset),loglevel=LL.VERBOSE)
    else:
        logthis("!! No ruleset matched",loglevel=LL.WARNING)

    # move to destination dir
    if rset.get('moveto',None):
        if dlx.moveTorrent(tid, rset['moveto']):
            logthis("** Moved to",suffix=rset['moveto'],loglevel=LL.INFO)
            time.sleep(2)
        else:
            logthis("!! Failed to move to",suffix=rset['moveto'],loglevel=LL.ERROR)

    # enqueue
    qurl = xsetup.config.srv['url'] + '/api/chook'
    headset = { 'Content-Type': "application/json", 'WWW-Authenticate': xsetup.config.srv['shared_key'], 'User-Agent': "rainwatch/"+xsetup.version }
    rq = requests.post(qurl,headers=headset,data=json.dumps({ 'thash': tid, 'opts': False }))

    if rq.status_code == 201:
        logthis(">> Queued torrent for transfer",loglevel=LL.INFO)
    else:
        logthis("!! Failed to queue for transfer:",suffix=str(rq.status_code)+' '+rq.reason,loglevel=LL.ERROR)

    logthis("*** Finished with complete exec hook for",suffix=tordata['name'],loglevel=LL.INFO)
    return True

##############################################################################
## Entry point
##

if __name__ == '__main__':

    # Show banner
    if len(sys.argv) < 2 or sys.argv[1] != '--version' and not (len(sys.argv[1]) > 1 and sys.argv[1][1] == 'q'):
        show_banner()

    # Check git info
    xsetup.gitinfo = git_info()

    # Set default loglevel
    loglevel(xsetup.defaults['core']['loglevel'])

    # parse CLI options and load running config
    xopt = parse_cli()
    rcfile.loadConfig(cliopts=xopt)
    loglevel(xsetup.config.core['loglevel'])
    openlog(xsetup.config.core['logfile'])

    # Set quiet exception handler for non-verbose operation
    if xsetup.config.core['loglevel'] < LL.VERBOSE:
        sys.excepthook = exceptionHandler

    # parse rules file
    ruleparser.parse()

    # connect to deluge (for non-daemon stuffs)
    if not xsetup.config.run['srv']:
        dlx = tclient.TorrentClient(xsetup.config)

    ## process commands

    if xsetup.config.run['list']:
        # get list of torrents
        mode_list()
    elif xsetup.config.run['torid']:
        # process 'complete' hook
        mode_chook(xsetup.config.run['torid'])
    elif xsetup.config.run['srv']:
        # start daemon
        daemon.start(xsetup.config)
    else:
        logthis("Nothing to do.",loglevel=LL.WARNING)

    closelog()
